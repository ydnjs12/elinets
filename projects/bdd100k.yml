# mean and std in RGB order, actually this part should remain unchanged as long as your dataset is similar to coco.
mean: [0.485, 0.456, 0.406]
std: [0.229, 0.224, 0.225]

label_list: [1,2,3,4,5,6]

seg_list: ['road', 'line']
seg_multilabel: false  # a pixel can belong to multiple labels (i.e. lane line + underlying road)

dataset:
  dataroot: /home/a/yewon_ws/src/DLENets/datasets/bdd100k/images/100k/
  labelroot: /home/a/yewon_ws/src/DLENets/datasets/bdd100k/labels/drivable/polygons/
  segroot:
  - /home/a/yewon_ws/src/DLENets/datasets/bdd_seg_gt
  - /home/a/yewon_ws/src/DLENets/datasets/bdd_lane_gt/
  test_set: val
  train_set: train
  org_img_size:
  - 720
  - 1280
  fliplr: 0.5
  flipud: 0.0
  hsv_h: 0.015
  hsv_s: 0.7
  hsv_v: 0.4
  rot_factor: 10
  scale_factor: 0.25
  shear: 0.0
  translate: 0.1
  # on bdd100k dataset, the below augmentations look really stupid on segmentation, so use freeze_seg if possible (free to prove us otherwise)
  # we only used mosaic with freeze_seg and no mixup
  # IMPORTANT: as mixup makes segmentation multi-label inherently, just use freeze_seg if you're going for multi-class segmentation, please
  mosaic: 0.0  # if set, recommended at 1.0 
  mixup: 0.0  # if set, recommended at 0.1
model:
  image_size:
  - 640
  - 384
pin_memory: true
